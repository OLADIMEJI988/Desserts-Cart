npx tailwindcss -i ./src/style.css -o ./dist/styles.css --watch


<img src="./images/icon-remove-item.svg" alt="">


// Brownie
<div class="card mx-5 relative z-[2] mb-10">
  <img
    class="rounded-md selected"
    src="./images/image-brownie-mobile.jpg"
    alt=""
  />

  <button
    class="toggleButton flex text-center w-auto space-x-2 py-2 px-5 bg-white border add-to-cart-border-color rounded-full absolute center-cart top-[180px]"
  >
    <img class="h-5" src="../dist/images/icon-add-to-cart.svg" alt="" />
    <p class="text-color text-[13px] font-semibold">Add to Cart</p>
  </button>

  <button
    class="order content hidden text-center w-auto gap-9 items-center justify-center py-2 px-2 add-to-cart-bg text-white rounded-full absolute center-cart top-[180px]"
  >
    <div
      class="active border border-solid rounded-full font-semibold w-[17px] h-[17px] flex items-center justify-center text-4xl"
    >
      <p id="decrement" class="mb-[9px]">-</p>
    </div>
    <p id="amount" class="font-semibold text-[18px]">0</p>
    <div
      id="increment"
      class="border border-solid rounded-full font-semibold w-[18px] h-[18px] flex items-center justify-center text-2xl"
    >
      <p class="mb-[6px]">+</p>
    </div>
  </button>

  <div class="gap-4 mt-6">
    <p class="text-xs text-color opacity-60 tracking-normal">Brownie</p>
    <p class="font-semibold">Salted Caramel Brownie</p>
    <p class="price-color font-semibold">$5.50</p>
  </div>
</div>

<!-- Panna Cotta -->
<div class="card mx-5 relative z-[2] mb-10">
  <img
    class="rounded-md selected"
    src="./images/image-panna-cotta-mobile.jpg"
    alt=""
  />

  <button
    class="toggleButton flex text-center w-auto space-x-2 py-2 px-5 bg-white border add-to-cart-border-color rounded-full absolute center-cart top-[180px]"
  >
    <img class="h-5" src="../dist/images/icon-add-to-cart.svg" alt="" />
    <p class="text-color text-[13px] font-semibold">Add to Cart</p>
  </button>

  <button
    class="order content hidden text-center w-auto gap-9 items-center justify-center py-2 px-2 add-to-cart-bg text-white rounded-full absolute center-cart top-[180px]"
  >
    <div
      class="active border border-solid rounded-full font-semibold w-[17px] h-[17px] flex items-center justify-center text-4xl"
    >
      <p id="decrement" class="mb-[9px]">-</p>
    </div>
    <p id="amount" class="font-semibold text-[18px]">0</p>
    <div
      id="increment"
      class="border border-solid rounded-full font-semibold w-[18px] h-[18px] flex items-center justify-center text-2xl"
    >
      <p class="mb-[6px]">+</p>
    </div>
  </button>

  <div class="gap-4 mt-6">
    <p class="text-xs text-color opacity-60 tracking-normal">Panna Cotta</p>
    <p class="font-semibold">Vanilla Panna Cotta</p>
    <p class="price-color font-semibold">$6.50</p>
  </div>
</div>
<!-- Cart -->
<div class="mx-5 bg-white h-auto rounded-xl pt-4 pb-16 px-6">
  <p class="cart-color text-[26px] font-bold opacity-90">
    Your Cart (<span>0</span>)
  </p>
  <div>
    <img
      class="ml-auto mr-auto mt-11"
      src="./images/illustration-empty-cart.svg"
      alt=""
    />
    <p
      class="text-center text-[13px] dirty-brown font-bold mt-[13px] opacity-75"
    >
      Your added items will appear here
    </p>
  </div>
</div>






   // adding to cart
   const addToCartBtn = document.querySelectorAll(".add-cart");
   const cartItemCount = document.querySelector(".cart span");
   const cartItemList = document.querySelector(".cart-items");
   const cartTotal = document.querySelector(".cart-total");
   const cartIcon = document.querySelector(".cart-icon");
   const cartActive = document.querySelector("#cart-active");
   let cartItems = [];
   let totalAmount = 0;

  addToCartBtn.forEach((button, index) => {
    button.addEventListener("click", () => {
      const item = {
        name: document.querySelectorAll(".card .dessert-title")[index]
          .textContent,
        price: parseFloat(
          document.querySelectorAll(".price")[index].textContent.slice(1)
        ),
        quantity: 1,
      };

      const existingItem = cartItems.find(
        (cartItem) => cartItem.name === item.name
      );
      if (existingItem) {
        existingItem.quantity++;
      } else {
        cartItems.push(item);
      }
      totalAmount += item.price;

      updateCartUI();
    });

    function updateCartUI() {
      updateCartItemCount(cartItems.length);
      updateCartItemList();
      updateCartTotal();
    }

    function updateCartItemCount(count) {
      cartItemCount.textContent = count;
    }

    function updateCartItemList() {
      cartItems.innerHTML = "";
      cartItems.forEach((item, index) => {
        const cartItem = document.createElement("div");
        cartItem.classList.add("cart-item", "individual-cart-item");
        cartItem.innerHTML = `
        <span>(${item.quantity}x)${item.name}</span>
        <span class="cart-item-price">$${(item.price * item.quantity).toFixed(2)}
        <button class="remove-btn" data-index="${index}"><img src="./images/icon-remove-item.svg" alt=""></button>
        </span>
        `;

        cartItemsList.append(cartItem);
      });

      const removeButtons = document.querySelectorAll() 
    }
  });
});




<!--  -->


document.addEventListener("DOMContentLoaded", function () {
  // Select all productCards
  const productCards = document.querySelectorAll(".card");
  const ordersInactive = document.querySelector(".ordersInactive");
  const ordersActive = document.querySelector(".ordersActive");

  let cartItems = [];

  productCards.forEach((productCard) => {
    const addToCartBtn = productCard.querySelector(".addToCart");
    const content = productCard.querySelector(".content");
    const selected = productCard.querySelector(".selected");

    addToCartBtn.addEventListener("click", () => {
      incrementAmount();
    });

    // --- adding to cart ---
    const decrementButton = productCard.querySelector("#decrement");
    const incrementButton = productCard.querySelector("#increment");
    const amountDisplay = productCard.querySelector("#amount");
    const orderButton = productCard.querySelector(".order");

    let amount = Number(amountDisplay.textContent, 10);

    const productDetails = {
      name: productCard.querySelector(".dessertName").textContent,
      price: parseFloat(
        productCard.querySelector(".price").textContent.slice(1)
      ),
      quantity: amount,
      element: productCard,
    };

    // cartItems.push(productDetails)

    function decrementAmount() {
      amount -= 1;

      if (amount === 0) {
        cartItems = cartItems.filter(
          (product) => product.name !== productDetails.name
        );
      } else {
        const productInCart = cartItems.find(
          (product) => product.name === productDetails.name
        );
        productInCart.quantity = amount;
      }

      updateUI();
    }

    function incrementAmount() {
      amount += 1;

      const productInCart = cartItems.find(
        (product) => product.name === productDetails.name
      );

      if (productInCart) {
        productInCart.quantity = amount;
      } else {
        cartItems.push({
          ...productDetails,
          quantity: amount,
        });
      }

      updateUI();
    }

    decrementButton.addEventListener("click", decrementAmount);
    incrementButton.addEventListener("click", incrementAmount);

    function updateUI() {
      if (amount > 0) {
        content.classList.remove("hidden");
        content.classList.add("flex");
        addToCartBtn.classList.add("hidden");
        selected.classList.add(
          "border-[3px]",
          "border-solid",
          "img-border-color"
        );
        ordersActive.classList.remove("hidden");
        ordersActive.classList.add("flex-row");
        ordersInactive.classList.add("hidden");
      } else {
        orderButton.classList.add("hidden");
        addToCartBtn.classList.remove("hidden");
        selected.classList.remove(
          "border-[3px]",
          "border-solid",
          "img-border-color"
        );
        ordersActive.classList.add("hidden");
        ordersActive.classList.remove("flex-row");
        ordersInactive.classList.remove("hidden");
      }
      amountDisplay.textContent = amount;

      updateCartUI();
    }
  });

  // adding to cart
  const cartItemCount = document.querySelector(".cart span");
  const cartItemList = document.querySelector(".cart-items");
  const cartTotal = document.querySelector(".cartTotal");

  function updateCartUI() {
    updateCartItemCount(cartItems.length);
    updateCartItemList();
    updateCartTotal();
  }

  function updateCartItemCount(count) {
    cartItemCount.textContent = count;
  }

  function updateCartItemList() {
    cartItemList.innerHTML = "";
    cartItems.forEach((item, index) => {
      const cartItem = document.createElement("div");
      cartItem.classList.add("cart-item", "individual-cart-item");
      cartItem.innerHTML = `
      <p class="font-semibold text-sm text-color mb-1 mt-6">${item.name}</p>
      <span class="text-[15px] font-bold flex-row cart-color">${
        item.quantity
      }x</span>
      <span class="cart-item-price opacity-50 text-color font-semibold text-sm ml-[7px] mr-[3px]">@$${item.price.toFixed(
        2
      )}</span>
      <span class="item-total opacity-80 font-semibold text-color text-sm">$${(
        item.price * item.quantity
      ).toFixed(2)}</span>
      <button data-index="${index}" class="remove-btn"><img class="pl-auto" src="./images/icon-remove-item.svg" alt=""></button>
      `;

      cartItemList.append(cartItem);
    });

    function removeItemFromCart(index) {
      cartItems.splice(index, 1);
      if (cartItems.length == 0 && amount > 0) {
        const productCard = cartItems[index].element;
        const orderButton = productCard.querySelector(".order");
        const addToCartBtn = productCard.querySelector(".addToCart");
        const selected = productCard.querySelector(".selected");
        

        orderButton.classList.add("hidden");
        addToCartBtn.classList.remove("hidden");
        selected.classList.remove(
          "border-[3px]",
          "border-solid",
          "img-border-color"
        );

        ordersActive.classList.remove("hidden");
        ordersActive.classList.add("flex-row");
        ordersInactive.classList.add("hidden");

        cartItems = cartItems.filter((_, i) => i !== index);
        updateCartUI();
      } else {
        updateCartUI();
      }
    }

    const removeButtons = document.querySelectorAll(".remove-btn");
    removeButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        const index = event.currentTarget.dataset.index;
        removeItemFromCart(Number(index));
      });
    });
  }

  // function removeItemFromCart(index) {}

  function updateCartTotal() {
    const totalAmount = cartItems.reduce(
      (prev, curr) => (prev += curr.price * curr.quantity),
      0
    );
    cartTotal.textContent = `$${totalAmount.toFixed(2)}`;
  }
});
